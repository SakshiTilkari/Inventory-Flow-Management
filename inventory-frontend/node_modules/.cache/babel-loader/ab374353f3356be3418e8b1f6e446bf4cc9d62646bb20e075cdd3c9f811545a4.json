{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Credoit_04\\\\Desktop\\\\Inventory Management\\\\inventory-frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { login as authLogin, logout as authLogout } from '../services/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (token) {\n      // You might want to verify token here or fetch user details\n      const userData = JSON.parse(localStorage.getItem('user'));\n      setUser(userData);\n    }\n  }, [token]);\n  const login = async credentials => {\n    try {\n      const {\n        user,\n        token\n      } = await authLogin(credentials);\n      setUser(user);\n      setToken(token);\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      navigate('/dashboard');\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    authLogout();\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+7qD7bUmAHfui0Eix5AVsIOIxzU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useNavigate","login","authLogin","logout","authLogout","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","navigate","userData","JSON","parse","credentials","setItem","stringify","error","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Credoit_04/Desktop/Inventory Management/inventory-frontend/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { login as authLogin, logout as authLogout } from '../services/auth';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      // You might want to verify token here or fetch user details\r\n      const userData = JSON.parse(localStorage.getItem('user'));\r\n      setUser(userData);\r\n    }\r\n  }, [token]);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const { user, token } = await authLogin(credentials);\r\n      setUser(user);\r\n      setToken(token);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    authLogout();\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,IAAIC,SAAS,EAAEC,MAAM,IAAIC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,WAAW,gBAAGX,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMY,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAACiB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAIc,KAAK,EAAE;MACT;MACA,MAAMK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MACzDJ,OAAO,CAACM,QAAQ,CAAC;IACnB;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,MAAMZ,KAAK,GAAG,MAAOoB,WAAW,IAAK;IACnC,IAAI;MACF,MAAM;QAAEV,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMX,SAAS,CAACmB,WAAW,CAAC;MACpDT,OAAO,CAACD,IAAI,CAAC;MACbG,QAAQ,CAACD,KAAK,CAAC;MACfE,YAAY,CAACO,OAAO,CAAC,OAAO,EAAET,KAAK,CAAC;MACpCE,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACI,SAAS,CAACZ,IAAI,CAAC,CAAC;MAClDM,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMrB,MAAM,GAAGA,CAAA,KAAM;IACnBC,UAAU,CAAC,CAAC;IACZQ,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACdC,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/BR,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEE,KAAK;MAAEZ,KAAK;MAAEE;IAAO,CAAE;IAAAM,QAAA,EACzDA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrB,EAAA,CAxCWF,YAAY;EAAA,QAGNR,WAAW;AAAA;AAAAgC,EAAA,GAHjBxB,YAAY;AA0CzB,OAAO,MAAMyB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMrC,UAAU,CAACU,WAAW,CAAC;AAAA;AAAC2B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}